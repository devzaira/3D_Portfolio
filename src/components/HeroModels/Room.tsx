/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 optimized-room.glb
*/

import React, { useRef, ForwardedRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { EffectComposer, SelectiveBloom } from "@react-three/postprocessing";
import { BlendFunction } from "postprocessing";
import * as THREE from "three";
import { Group, Mesh } from "three";

type GLTFResult = ReturnType<typeof useGLTF>;
type Props = JSX.IntrinsicElements['group'];

export function Room(props: Props) {
  const { nodes, materials } = useGLTF("/models/optimized-room.glb") as unknown as GLTFResult & {
    nodes: Record<string, THREE.Mesh>;
    materials: Record<string, THREE.Material>;
  };

  const screensRef = useRef<Mesh>(null);
  const matcapTexture = useTexture("/images/textures/mat1.png");

  const curtainMaterial = new THREE.MeshPhongMaterial({
    color: "#d90429",
  });

  const bodyMaterial = new THREE.MeshPhongMaterial({
    map: matcapTexture,
  });

  const tableMaterial = new THREE.MeshPhongMaterial({
    color: "#582f0e",
  });

  const radiatorMaterial = new THREE.MeshPhongMaterial({
    color: "#fff",
  });

  const compMaterial = new THREE.MeshStandardMaterial({
    color: "#fff",
  });

  const pillowMaterial = new THREE.MeshPhongMaterial({
    color: "#8338ec",
  });

  const chairMaterial = new THREE.MeshPhongMaterial({
    color: "#000",
  });

  return (
    <group {...props} dispose={null}>
      <EffectComposer>
        <SelectiveBloom
          selection={screensRef}
          intensity={1.5}
          luminanceThreshold={0.2}
          luminanceSmoothing={0.9}
          blendFunction={BlendFunction.ADD}
        />
      </EffectComposer>

      {/* Add all meshes with their appropriate nodes and materials */}
      {/* For brevity, one example below, rest will follow the same pattern */}
      <mesh
        geometry={nodes["_________6_blinn1_0"].geometry}
        material={curtainMaterial}
      />
      <mesh
        geometry={nodes["body1_blinn1_0"].geometry}
        material={bodyMaterial}
      />
      <mesh
        geometry={nodes["cabin_blinn1_0"].geometry}
        material={tableMaterial}
      />
      <mesh
        geometry={nodes["chair_body_blinn1_0"].geometry}
        material={chairMaterial}
      />
      <mesh
        geometry={nodes["comp_blinn1_0"].geometry}
        material={compMaterial}
      />
      <mesh
        ref={screensRef}
        geometry={nodes["emis_lambert1_0"].geometry}
        material={materials["lambert1"]}
      />
      {/* Continue with remaining mesh declarations... */}
    </group>
  );
}

useGLTF.preload("/models/optimized-room.glb");
